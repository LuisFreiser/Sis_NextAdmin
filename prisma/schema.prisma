// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // o el provider que uses (postgresql, mysql, etc.)
  url      = env("DATABASE_URL")
}

model Clientes {
  id                Int      @id @default(autoincrement())
  nombre            String
  nro_documento     String   @unique
  tipo_documento_id Int
  email             String?
  telefono          String?
  direccion         String?
  createdAt         DateTime @default(now())

  tipodocumento TipoDocumento @relation(fields: [tipo_documento_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  ventas Ventas[]
}

model Marca {
  id        Int         @id @default(autoincrement())
  nombre    String      @unique
  estado    String      @default("ACTIVO")
  productos Productos[]
}

model TipoDocumento {
  id          Int           @id @default(autoincrement())
  documento   String        @unique
  estado      String        @default("ACTIVO")
  proveedores Proveedores[]
  clientes    Clientes[]
}

model Proveedores {
  id                Int      @id @default(autoincrement())
  nombre            String
  tipo_documento_id Int
  nro_documento     String   @unique
  direccion         String?
  telefono          String?
  email             String?  @unique
  estado            String   @default("ACTIVO")
  createdAt         DateTime @default(now())

  tipoDocumento TipoDocumento @relation(fields: [tipo_documento_id], references: [id], onDelete: Restrict, onUpdate: Cascade)

  compras Compras[]
}

model Usuarios {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String   @unique
  password  String
  rol       String
  estado    String   @default("ACTIVO")
  createdAt DateTime @default(now())

  ventas             Ventas[]
  AperturaCierreCaja AperturaCierreCaja[]
  Caja               Caja[]
}

model Productos {
  id                Int      @id @default(autoincrement())
  codigo_prod       String   @unique
  nombre            String
  marcaId           Int
  unidades_por_caja Int?
  stock_cajas       Int      @default(0)
  stock_unidades    Int?
  stock_min_cajas   Int?
  precio_compra     Float
  precio_venta_caja Float    @default(0)
  precio_venta_unit Float    @default(0)
  imagen            String?
  estado            String   @default("ACTIVO")
  createdAt         DateTime @default(now())

  marca          Marca            @relation(fields: [marcaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  detalleVentas  DetalleVentas[]
  detalleCompras DetalleCompras[]
  lote_producto  LoteProducto[]
}

model Ventas {
  id                  Int      @id @default(autoincrement())
  nro_comprobante     String   @unique
  clienteId           Int
  fecha_venta         DateTime @default(now())
  tipo_pago           String
  tipo_comprobante_id Int
  estado              String   @default("PENDIENTE")
  usuarioId           Int

  cliente          Clientes        @relation(fields: [clienteId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  usuario          Usuarios        @relation(fields: [usuarioId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  detalleVentas    DetalleVentas[]
  tipo_comprobante TipoComprobante @relation(fields: [tipo_comprobante_id], references: [id])
}

model DetalleVentas {
  id           Int   @id @default(autoincrement())
  ventaId      Int
  productoId   Int
  cantidad     Int
  precio_venta Float
  descuento    Float @default(0)

  venta    Ventas    @relation(fields: [ventaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  producto Productos @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model Compras {
  id                  Int      @id @default(autoincrement())
  proveedorId         Int
  tipo_comprobante_id Int
  nro_comprobante     String?
  fecha_compra        DateTime @default(now())
  fecha_vencimiento   DateTime @default(now())
  tipo_moneda         String   @default("PEN")
  forma_pago          String   @default("CONTADO")
  estado              String   @default("PENDIENTE")

  detalleCompras  DetalleCompras[]
  proveedor       Proveedores      @relation(fields: [proveedorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  tipoComprobante TipoComprobante  @relation(fields: [tipo_comprobante_id], references: [id])
}

model DetalleCompras {
  id            Int   @id @default(autoincrement())
  compraId      Int
  productoId    Int
  cantidad      Int
  precio_compra Float
  descuento     Float @default(0)

  compra   Compras   @relation(fields: [compraId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  producto Productos @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)
}

model LoteProducto {
  id                Int      @id @default(autoincrement())
  productoId        Int
  fecha_ingreso     DateTime
  fecha_vencimiento DateTime
  numero_lote       String?
  nro_orden_compra  String?

  producto Productos @relation(fields: [productoId], references: [id])
}

model TipoComprobante {
  id     Int     @id @default(autoincrement()) // Clave primaria autoincremental (SQLite usa Int)
  codigo String  @unique // Código SUNAT (ej: '01', '03'), debe ser único.
  nombre String // Nombre descriptivo (ej: 'Factura Electrónica', 'Boleta de Venta Electrónica')
  estado String?

  // Relación: Un tipo de comprobante puede tener muchas series asociadas.
  series  SeriesComprobante[]
  Ventas  Ventas[]
  Compras Compras[]
}

model SeriesComprobante {
  id                  Int     @id @default(autoincrement())
  // Campo que almacena el ID del TipoComprobante al que pertenece esta serie (clave foránea)
  tipo_comprobante_id Int
  serie               String // Código de la serie (ej: 'F001', 'B001')
  correlativo_actual  Int     @default(0) // Último número usado o siguiente a usar. Iniciamos en 0.
  estado              String? // Estado de la serie (ej: 'Activa', 'Inactiva'). Opcional (?)

  // --- Relación con TipoComprobante ---
  tipoComprobante TipoComprobante @relation(fields: [tipo_comprobante_id], references: [id], onDelete: Restrict, onUpdate: Cascade)
  // onDelete: Restrict -> No permite borrar un TipoComprobante si tiene series asociadas.
  // onUpdate: Cascade -> Si cambia el ID del TipoComprobante (poco común), se actualiza aquí.

  // --- Restricciones ---
  // Asegura que la combinación de tipo de comprobante y serie sea única.
  // No puedes tener dos veces la serie 'F001' para el mismo 'TipoComprobante'.
  @@unique([tipo_comprobante_id, serie])
}

model AperturaCierreCaja {
  id             Int       @id @default(autoincrement())
  usuarioId      Int
  fecha_apertura DateTime  @default(now())
  monto_inicial  Float
  fecha_cierre   DateTime?
  monto_final    Float?
  diferencia     Float?
  observaciones  String?
  estado         String    @default("ABIERTA")

  usuario Usuarios @relation(fields: [usuarioId], references: [id])
  caja    Caja[]
}

model Caja {
  id               Int     @id @default(autoincrement())
  aperturaCierreId Int
  tipo_movimiento  String
  usuarioId        Int
  metodo_pago      String?
  descripcion      String?

  aperturaCierreCaja AperturaCierreCaja @relation(fields: [aperturaCierreId], references: [id])
  usuario            Usuarios           @relation(fields: [usuarioId], references: [id])
}

model Empresa {
  id                   Int       @id @default(autoincrement())
  nombre_empresa       String
  direccion            String?
  telefono             String?
  email                String?
  moneda               String    @default("USD")
  simbolo_moneda       String    @default("$")
  formato_fecha        String    @default("YYYY-MM-DD")
  formato_hora         String    @default("HH:mm:ss")
  igv_general          Float     @default(0.0)
  logo                 String?
  terminos_condiciones String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime?
}
