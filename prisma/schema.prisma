// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // o el provider que uses (postgresql, mysql, etc.)
  url      = env("DATABASE_URL")
}

model Categorias {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  estado    String   @default("VIGENTE")
  productos Productos[]
}

model Clientes {
  id            Int       @id @default(autoincrement())
  nombre        String
  nro_documento String   @unique
  tipo_documento String
  email         String?
  telefono      String?
  direccion     String?
  createdAt     DateTime @default(now())

  ventas Ventas[]
}

model Marcas {
  id        Int      @id @default(autoincrement())
  nombre    String   @unique
  estado    String   @default("VIGENTE")
  productos Productos[]
}

model Proveedores {
  id            Int       @id @default(autoincrement())
  nombre        String
  nro_documento String   @unique
  tipo_documento String?
  contacto      String?
  telefono      String?
  email         String?
  direccion     String?
  ciudad        String?
  estado        String   @default("VIGENTE")
  createdAt     DateTime @default(now())

  compras Compras[]
}

model Usuarios {
  id         Int       @id @default(autoincrement())
  nombre     String
  email      String   @unique
  password   String
  rol      String
  estado     String   @default("ACTIVO")
  createdAt  DateTime @default(now())

  ventas            Ventas[]
  compras           Compras[]
  AperturaCierreCaja AperturaCierreCaja[]
  Caja              Caja[]
}

model Productos {
  id             Int      @id @default(autoincrement())
  codigo_prod    String   @unique
  nombre         String
  precio_compra  Float
  precio_venta   Float
  stock          Int
  stock_min      Int?
  categoriaId    Int
  marcaId        Int
  presentacionId Int?
  imagen         String?
  estado         String   @default("VIGENTE")
  createdAt      DateTime @default(now())

  categoria    Categorias    @relation(fields: [categoriaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  marca        Marcas        @relation(fields: [marcaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  presentacion Presentacion? @relation(fields: [presentacionId], references: [id])
  detallesVentas DetallesVentas[]
  detallesCompras DetallesCompras[]
  lotes_producto LotesProducto[]

}

model Ventas {
  id                 Int      @id @default(autoincrement())
  nro_comprobante    String   @unique
  clienteId          Int
  fecha_venta        DateTime @default(now())
  tipo_pago          String
  tipo_comprobante_id Int?
  estado             String   @default("PENDIENTE")
  usuarioId          Int

  cliente         Clientes         @relation(fields: [clienteId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  usuario         Usuarios         @relation(fields: [usuarioId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  detallesVentas  DetallesVentas[]
  tipos_comprobante TiposComprobante? @relation(fields: [tipo_comprobante_id], references: [id])
}

model DetallesVentas {
  id           Int   @id @default(autoincrement())
  ventaId      Int
  productoId   Int
  cantidad     Int
  precio_venta Float
  descuento    Float @default(0)  

  venta     Ventas    @relation(fields: [ventaId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  producto  Productos @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)  
}

model Compras {
  id                 Int      @id @default(autoincrement())
  nro_comprobante    String?
  proveedorId        Int
  fecha_compra       DateTime @default(now())
  tipo_pago          String
  tipo_comprobante_id Int?
  estado             String   @default("PENDIENTE")
  usuarioId          Int

  proveedor         Proveedores         @relation(fields: [proveedorId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  usuario         Usuarios         @relation(fields: [usuarioId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  detallesCompras  DetallesCompras[]
  tipos_comprobante TiposComprobante? @relation(fields: [tipo_comprobante_id], references: [id])
}

model DetallesCompras {
  id           Int   @id @default(autoincrement())
  compraId     Int
  productoId   Int
  cantidad     Int
  precio_compra Float  

  compra    Compras   @relation(fields: [compraId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  producto  Productos @relation(fields: [productoId], references: [id], onDelete: Restrict, onUpdate: Cascade)  
}

model Presentacion {
  id        Int      @id @default(autoincrement())
  nombre    String
  siglas    String
  estado    String   @default("VIGENTE")
  productos Productos[]
}

model LotesProducto {
  id             Int       @id @default(autoincrement())
  productoId     Int
  fecha_ingreso  DateTime
  fecha_vencimiento DateTime
  numero_lote    String?
  nro_orden_compra String?

  producto Productos @relation(fields: [productoId], references: [id])
}

model TiposComprobante {
  id          Int      @id @default(autoincrement())
  comprobante String
  estado      String   @default("VIGENTE")
  Ventas      Ventas[]
  Compras     Compras[]
}

model AperturaCierreCaja {
  id               Int       @id @default(autoincrement())
  usuarioId        Int
  fecha_apertura DateTime @default(now())
  mont_inicial     Float
  fecha_cierre  DateTime?
  monto_Final       Float?
  diferencia       Float?
  observaciones    String?
  estado           String   @default("ABIERTO")

  usuario Usuarios @relation(fields: [usuarioId], references: [id])
  caja    Caja[]
}

model Caja {
  id               Int    @id @default(autoincrement())
  aperturaCierreId Int
  tipo_Movimiento   String
  usuarioId        Int
  metodo_pago       String?
  descripcion      String?

  aperturaCierreCaja AperturaCierreCaja @relation(fields: [aperturaCierreId], references: [id])
  usuario            Usuarios          @relation(fields: [usuarioId], references: [id])
}

model Configuracion {
  id                Int      @id @default(autoincrement())
  nombre_empresa    String
  direccion         String?
  telefono          String?
  email             String?
  sitio_web         String?
  moneda            String   @default("USD")
  simbolo_moneda    String   @default("$")
  formato_fecha     String   @default("YYYY-MM-DD")
  formato_hora      String   @default("HH:mm:ss")
  igv_general       Float    @default(0.0)
  logo              String?
  terminos_condiciones String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime?
}